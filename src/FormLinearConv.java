/*
 * @HenryHuang
 * linearConv.java
 * April 30, 2018
 * This program is uses to convert value from two conversion methods.
 */

/**
 *
 * @author shhua8751
 */
public class FormLinearConv extends javax.swing.JFrame {

    /**
     * Creates new form FormLinearConv
     */
    public FormLinearConv() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        linearLabel = new javax.swing.JLabel();
        methodLabel = new javax.swing.JLabel();
        methodBox = new javax.swing.JComboBox();
        valueLabel = new javax.swing.JLabel();
        valueInput = new javax.swing.JTextField();
        convertButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        hintLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        linearLabel.setText("Linear Conversion");

        methodLabel.setText("Choose a conversion method:");

        methodBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.Inches to Centimetres", "2.Centimetres to Inches", "3.Feet to Centimetres", "4.Centimetres to Feet", "5.Yards to Metres", "6.Metres to Yards", "7.Miles to Kilometres", "8.Kilometres to Miles", " " }));
        methodBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodBoxActionPerformed(evt);
            }
        });

        valueLabel.setText("Enter the value to be converted:  ");

        convertButton.setText("Convert");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(linearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(hintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(convertButton)
                        .addGap(71, 71, 71))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(methodLabel)
                                    .addComponent(valueLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(valueInput)
                                    .addComponent(methodBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(41, 41, 41))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(linearLabel)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(methodLabel)
                    .addComponent(methodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueLabel)
                    .addComponent(valueInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(convertButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        String method;
        String one;
        String two;
        String three;
        String four;
        String five;
        String six;
        String seven;
        String eight;
        
        method = (String) methodBox.getSelectedItem();
        one    =   "1.Inches to Centimetres";
        two    =   "2.Centimetres to Inches";
        three  =   "3.Feet to Centimetres";
        four   =   "4.Centimetres to Feet";
        five   =   "5.Yards to Metres";     
        six    =   "6.Metres to Yards";
        seven  =   "7.Miles to Kilometres";
        eight  =   "8.Kilometres to Miles";

        
        
        if (method == one)
        {
            inchesToCentimetres(30);
        }
        else if(method == two)
        {
            centimetresToInches(30);
        }
        else if(method == three)
        {
            feetToCentimetres(30);
        }
        else if(method == four)
        {
            centimetresToFeet(30);
        }
        else if(method == five)
        {
            yardsToMetres(30);
        }
        else if(method == six)
        {
            metresToYards(30);
        }
        else if (method == seven)
        {
            milesToKilometres(30);
        }
        else if (method == eight)
        {
            kilometresToMiles(30);
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void methodBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodBoxActionPerformed
        String conversion;
        conversion = (String)methodBox.getSelectedItem();
        if (conversion  == "1.Inches to Centimetres")
        {
            hintLabel.setText("Inches to Centimetres");
        }
        
    }//GEN-LAST:event_methodBoxActionPerformed

    private void inchesToCentimetres(int value)
    {
        double inches;
        double centimetres;
        String messageOut;
        
        inches = Integer.parseInt(valueInput.getText());
        centimetres = inches * 2.54;
        
        messageOut = inches + " Inches = " + Math.round(centimetres) + " Centimetres";
        
        outputLabel.setText(messageOut);
            
    }
    
    private void centimetresToInches(int value)
    {
        double inches;
        double centimetres;
        String messageOut;
        
        centimetres = Integer.parseInt(valueInput.getText());
        inches = centimetres * 0.39370;
        
        messageOut = centimetres + " Centimetres = " + Math.round(inches) + " Inches";
        
        outputLabel.setText(messageOut);
    }
    
     private void feetToCentimetres(int value)
    {
        double feet;
        double centimetres;
        String messageOut;
        
        feet = Integer.parseInt(valueInput.getText());
        centimetres = feet * 30;
        
        messageOut = feet + " Feet = " + Math.round(centimetres) + " Centimetres";
        
        outputLabel.setText(messageOut);
    }
    
     
      private void centimetresToFeet(int value)
    {
        double feet;
        double centimetres;
        String messageOut;
        
        centimetres = Integer.parseInt(valueInput.getText());
        feet = centimetres * 0.032808;
        
        messageOut = centimetres + " Centimetres = " + Math.round(feet) + " Feet";
        
        outputLabel.setText(messageOut);
    }
      
       private void yardsToMetres(int value)
    {
        double yards;
        double metres;
        String messageOut;
        
        yards = Integer.parseInt(valueInput.getText());
        metres = yards * 0.91;
        
        messageOut = yards + " Yards = " + Math.round(metres) + " Metres";
        
        outputLabel.setText(messageOut);
    }
       
        private void metresToYards(int value)
    {
        double yards;
        double metres;
        String messageOut;
        
        metres = Integer.parseInt(valueInput.getText());
        yards = metres * 1.0936;
        
        messageOut = metres + " Metres = " + Math.round(yards) + " Yards";
        
        outputLabel.setText(messageOut);
    }
        
         private void milesToKilometres(int value)
    {
        double miles;
        double kilometres;
        String messageOut;
        
        miles = Integer.parseInt(valueInput.getText());
        kilometres = miles * 1.6;
        
        messageOut = miles + " Miles = " + Math.round(kilometres) + " Kilometres";
        
        outputLabel.setText(messageOut);
    }
         
           private void kilometresToMiles(int value)
    {
        double miles;
        double kilometres;
        String messageOut;
        
        kilometres = Integer.parseInt(valueInput.getText());
        miles = kilometres * 0.62137;
        
        messageOut = kilometres + " Kilometres = " + Math.round(miles) + " Miles";
        
        outputLabel.setText(messageOut);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormLinearConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormLinearConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormLinearConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormLinearConv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormLinearConv().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel linearLabel;
    private javax.swing.JComboBox methodBox;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField valueInput;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
